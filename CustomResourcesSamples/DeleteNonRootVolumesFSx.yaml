AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyStorageVirtualMachine:
    Type: 'AWS::FSx::StorageVirtualMachine'
    Properties:
      FileSystemId: fs-0268e62d30ab3927e
      Name: SVMTest7
  DeleteNonRootVolumesFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: MyStorageVirtualMachine
    Properties:
      Role: !GetAtt LambdaCustomResourceRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3

          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      storage_vm_id = event['ResourceProperties']['StorageVirtualMachineId']
                      print(f"Storage: {storage_vm_id}")
                      fsx_client = boto3.client('fsx')

                      # Describe file systems associated with the Storage Virtual Machine
                      response = fsx_client.describe_volumes(
                          Filters=[{'Name': 'storage-virtual-machine-id', 'Values': [storage_vm_id]}]
                      )
                      print(f"Response: {response}")

                      # Delete non-root volumes
                      for volume in response['Volumes']:
                          print(f"Processing volume: {volume}")
                          try:
                              rootvar = volume['OntapConfiguration']['StorageVirtualMachineRoot']
                          except Exception as e:
                              print(str(e))
                          print(f"Processing root: {rootvar}")
                          if rootvar == 'True':
                              continue
                          else:
                              try:
                                  fsx_client.delete_volume(
                                      VolumeId=volume['VolumeId']
                                  )
                              except Exception as e:
                                  print(str(e))
                              

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30

  CustomResource:
    Type: 'Custom::DeleteNonRootVolumes'
    Properties:
      ServiceToken: !GetAtt DeleteNonRootVolumesFunction.Arn
      StorageVirtualMachineId: !Ref MyStorageVirtualMachine
  
  LambdaCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - iam:*
            - fsx:*
            Resource: '*'

Outputs:
  StorageVirtualMachineId:
    Value: !Ref MyStorageVirtualMachine
